#!/usr/bin/env python

''' For GTseq: gtseq-rm_loci_infiles.py 
    Description: Filters out loci in the GTseq input files that 
                 should be removed (i.e., that have no data and 
                 are listed in a loci_to_remove.txt file, which 
                 was generated by gtseq-rm_loci_genolib.py using 
                 the GTseq output Library_Genotypes.csv file)

    input: file_to_filter - 
                 one of two GTseq input files, which 
                 needs to have certain loci removed
           loci_to_remove.txt - 
                 a file containing loci to be 
                 filtered out of file_to_filter
                 * This file can be generated using 
                      gtseq-rm_loci_genolib.py 

    output: file_to_filter_filtered - 
                 input file with all loci_to_remove removed

    usage: ./gtseq-rm_loci_infiles.py file_to_filter.txt loci_to_remove.txt 

    CYP 10/04/2017
'''

import sys
import csv

# create a list of all the loci that need to be removed
# (found in 2nd infile, one loci per line)
to_remove_list = [line.rstrip() for line in open(sys.argv[2])]

# create an outfile for filtered file_to_filter
infile_list = (sys.argv[1]).split('.')
outfile = infile_list[0] + '_filtered.' + infile_list[-1]
out = open(outfile, 'wb')

with open(sys.argv[1], 'r') as filter_file:
  # determine how the file_to_filter is delimited
  dialect = csv.Sniffer().sniff(filter_file.read(1024))
  filter_file.seek(0)
  # read in file_to_filter
  reader = csv.reader(filter_file, dialect)
  out_w = csv.writer(out, dialect)
  for row in reader:
    locus = row[0]
    # if locus corresponding to this row of data
    # isn't in list of loci to remove, write to outfile
    if not locus in to_remove_list:
      out_w.writerow(row)

out.close()
